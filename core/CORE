#!/bin/bash

#sudo echo "<< EGSH - core >>"
#[ $? -eq 0 ] || exit -1

export EGSH_DIR ;
export EGSH_VERSION ;
export EGSH_USR_DIR ;
export EGSH_USR_INC ;
export EGSH_USR_SRC ;
export EGSH_USR_ENV ;
export EGSH_USR_DCMD ;

export EGSH_CTX_ENV_LIB ;    
export EGSH_CTX_DCMD_LIB ;
export EGSH_CTX_PKG_LIB ;

EGSH()
{
	echo "< ${FUNCNAME[0]} - egsh manager >"
	if [ ! -z $1 ] ; then 
case $1 in
	list | ls )
		echo "ALL_FILE_LIST :"
		EGSH_FILE_LIST=( $( ls -p $EGSH_USR_SRC | grep -v "/$" ) )
		#EGSH_FILE_LIST=( $( find $EGSH_USR_SRC | grep -v "/$" ) )
		echo ${EGSH_FILE_LIST[@]}
	;;
	include | in )
		echo "Usage : include(in) [ filename ]"
		if [ ! -z $2 ] 
		then 	echo "INCLUDE"
			if [ -f $EGSH_USR_SRC/$2 ] ; then
			ln -s $EGSH_USR_SRC/$2 $EGSH_USR_INC
			exit
			fi

			if [ -f $2 ] ; then
			ln -s $(realpath $2) $EGSH_USR_INC
			exit
			fi

		else 	echo "CURRENT INCLUDED :"
			INCLUDE_CMDLIST=( $( ls -p $EGSH_USR_INC | grep -v / ) )
			INCLUDE_CMDMAXNUM=${#INCLUDE_CMDLIST[@]}
			echo ${INCLUDE_CMDLIST[@]}
			#echo $INCLUDE_CMDMAXNUM
		fi
	;;
	exclude | ex )
		echo "Usage : exclude(ex) [ filename ]"
		if [ ! -z $2 ] && [ -f $EGSH_USR_INC/$2 ]
		then 	echo "EXCLUDE $2"
			rm $EGSH_USR_INC/$2
		else 	echo "CURRENT EXCLUDED :"
			INCLUDE_CMDLIST=( $( ls -p $EGSH_USR_INC | grep -v / ) )
			EXCLUDE_CMDLIST=( $( ls -p $EGSH_USR_SRC | grep -v / ) )
	
			#remove included cmd from array
			for i in ${INCLUDE_CMDLIST[@]}
			do EXCLUDE_CMDLIST=( "${EXCLUDE_CMDLIST[@]/$i}" )
			done

			echo ${EXCLUDE_CMDLIST[@]}
		fi
	;;
	install | ins )	
		echo "Usage : install(ins) < START >"

		if [ ! -z $2 ] 
        then 
            cp $EGSH_CTX_DCMD_LIB/install.sh $EGSH_USR_DCMD
        fi
	;;
	remove | rm )	
		echo "Usage : remove(rm) < START >"

		if [ ! -z $2 ] 
        then 
            cp $EGSH_CTX_DCMD_LIB/remove.sh $EGSH_USR_DCMD
        fi
	;;
	* )	
		echo "Usage : ${FUNCNAME[0]} <CMD> [ CMDARG ] " ;
		echo "CMD := { list(ls) | include(in) | exclude(ex) | install(ins) | remove(rm) }"
	;;
esac
	else	echo "Usage : ${FUNCNAME[0]} <CMD> [ CMDARG ] " ;
		echo "CMD := { list(ls) | include(in) | exclude(ex) | install(ins) | remove(rm) }"
	fi
	return
}

echo "<INCLUDED>:"
ls $EGSH_USR_INC
for i in $( ls -p $EGSH_USR_INC | grep -v / )
do 	source $EGSH_USR_INC/$i 
done

#fix egsh numbering as 0
CMDLIST=( EGSH )
TCMDLIST=( $( declare -F | sed 's/declare -f //g' ) )
TCMDLIST=( "${TCMDLIST[@]/EGSH}" )
CMDLIST+=( ${TCMDLIST[@]} )

CMDMAXNUM=${#CMDLIST[@]}
CMDLINE=($@)

case $# in
	0 )
		echo "<COMMAND_LIST>:"
		for (( i=0 ; i < $CMDMAXNUM ; i++ )) 
		do echo $i ${CMDLIST[$i]}
		done
		# pipe above output to mktemp ..
		# and column -x $variable
	
		echo "Usage : egsh < COMMAND | COMMAND_NUM >"
		exit 0
	;;
	* )	
		echo "<COMMAND_START>:"
		CMDFIRST=$( echo $1 | grep -wP "\d*" )
		if [ -z $CMDFIRST ]
		then 	#echo "[ CMD ARG : $1 ]"
			#check function exist in array if not normal function like 'ls' also available 
			printf '%s\n' "${CMDLIST[@]}" | grep -P "^$1$"
			if [ $? -eq 0 ] 
			then	${CMDLINE[@]}
			else 	echo "COMMAND NOT EXIST"
			fi
		
		else 	#echo "[ NUM ARG : $1 ]"
			[ $CMDMAXNUM -le $CMDFIRST ] && { echo "TOOBIG!" ; exit 0 ; }
			CMDLINE[0]=${CMDLIST[$CMDFIRST]}
		
			${CMDLINE[@]}
		fi
	;;
esac

