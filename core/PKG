#!/bin/bash 

# 5. Set env for egsh
#export EGSH_DIR ;
#export EGSH_VERSION ;
#export EGSH_DIR_SRC_CORE ; 	#used in PKG /ENV 
#export EGSH_USR_DIR=$UHOME/.egsh
#export EGSH_USR_SRC=$UHOME/.egsh/src
#export EGSH_USR_INC=$UHOME/.egsh/include
#export EGSH_USR_SYNC=$UHOME/.egsh/sync
##export EGSH_USR_ENV=$UHOME/.egsh/env
#export EXCLUDEDIR=$EGSH_USR_SRC

EGSH_DIR_PKG=$EGSH_DIR_SRC_CORE/PKG

PKG(){
	echo "< ${FUNCNAME[0]} - pkg manager >"
	if [ ! -z $1 ] ; then 
case $1 in
	mkpkg | mk )
		EGSH_TEMPLATE=
		EGSH_PKG_NAME=
		EGSH_PKG_ARCH=


		#echo "Usage : debpkg < Source included? : n/y >"
		echo "Usage : mkpkg <Version integer> < arch > [include sources? : n/y]"
		echo "Where :"
		echo "	Version integer := (0:nopatch, 1~9:patch, 10~100:minor, X>100:major)"

		[ -z $2 ] && exit -1 ;
		[ -z $3 ] && exit -1 || EGSH_PKG_ARCH=$3 ;

		if [ ! -z $4 ] ; then			
			if [ $4 == "n" ] || [ $4 == "no" ] ; then
				echo "do not include souce"
			elif [ $4 == "y" ] || [ $4 == "yes" ] ; then
				echo "include source in pkg"
			else :
				echo "Invalid parameter"
			fi
		fi

		VER_MAJOR=$( sed -nE 's/([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/\1/p' $EGSH_VERSION)
		VER_MINOR=$( sed -nE 's/([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/\2/p' $EGSH_VERSION)
		VER_PATCH=$( sed -nE 's/([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})/\3/p' $EGSH_VERSION)

		# the reason () not work -> is the thing that subshell takes $2 as ...? 
		if echo "$2" | grep -qE "^[0-9]*$" ; then
			if [ $2 -ge 100 ] ; then
				(( VER_MAJOR += $2 / 100 ))
				(( VER_MINOR = 0 ))
				(( VER_PATCH = 0 ))
			elif [ $2 -ge 10 ] ; then
				(( VER_MINOR += $2 / 10 ))
				(( VER_PATCH = 0 ))
			elif [ $2 -ge 1 ] ; then
				(( VER_PATCH += $2 ))
			else 
				:
			fi
		fi

		EGSH_VERSION_NEW="$VER_MAJOR.$VER_MINOR.$VER_PATCH"
		echo New version = $EGSH_VERSION_NEW
		EGSH_TEMPLATE=$EGSH_DIR_PKG/deb
		EGSH_PKG_NAME=egsh_$EGSH_VERSION_NEW-1_$EGSH_PKG_ARCH
		EGSH_PKG_CTL=$EGSH_USR_SYNC/$EGSH_PKG_NAME/DEBIAN/control
		EGSH_DIR_NEW=$EGSH_USR_SYNC/$EGSH_PKG_NAME/usr/local/lib/egsh
		EGSH_DIR_NEW_BIN=$EGSH_USR_SYNC/$EGSH_PKG_NAME/usr/local/bin/egsh
		#variable all set! and create from now
		# 0. clean all colliding dir/files
		rm -rf $EGSH_USR_SYNC/$EGSH_PKG_NAME*

		# 1. modify my pkg first 
			cp -r $EGSH_TEMPLATE $EGSH_USR_SYNC/$EGSH_PKG_NAME
			cp -r $EGSH_DIR $EGSH_DIR_NEW
			ln -s $EGSH_DIR/egsh $EGSH_DIR_NEW_BIN
			echo "$EGSH_VERSION_NEW" > $EGSH_DIR_NEW/env/VERSION
			
			# clean sources.. if no source build
			# rm swp.. sop ...
		# 2. modify deb pkg contents
			echo "Package: egsh" > $EGSH_PKG_CTL
			echo "Version: $EGSH_VERSION_NEW" >> $EGSH_PKG_CTL
			echo "Architecture: $EGSH_PKG_ARCH" >> $EGSH_PKG_CTL
			echo "Maintainer: turi <turidaritur@gmail.com>" >> $EGSH_PKG_CTL
			echo "Description: Shell script managing tool" >> $EGSH_PKG_CTL
			#echo " You can add a longer description here. Mind the space at the beginning of this paragraph." >> $EGSH_PKG_CTL
		#create package
		dpkg-deb --root-owner-group -b $EGSH_USR_SYNC/$EGSH_PKG_NAME
		#remove files
		rm -rf $EGSH_USR_SYNC/$EGSH_PKG_NAME
		cp $EGSH_USR_SYNC/$EGSH_PKG_NAME.deb $PWD
		#inform user it is finished
		echo "$EGSH_VERSION_NEW" > $EGSH_USR_SYNC/VERSION
		echo "Package Created"
	;;
	* )	
		echo "Usage : ${FUNCNAME[0]} <CMD> [ CMDARG ] " ;
		echo "CMD := { mkpkg(mk) }"
	;;
esac
	else
		echo "Usage : ${FUNCNAME[0]} <CMD> [ CMDARG ] " ;
		echo "CMD := { mkpkg(mk) }"
	fi
	return
}
